{
  "total_modules": 11,
  "analyzed_modules": 11,
  "total_loc": 13977,
  "average_complexity": 6.830418020622258,
  "total_classes": 46,
  "total_methods": 1243,
  "documentation_coverage": 100.0,
  "dependency_graph": {
    "oran-6g-neuromorphic-computing": [
      "ns3/exponential-random-variable.h",
      "ns3/log.h",
      "ns3/string.h",
      "ns3/object.h",
      "ns3/uniform-random-variable.h",
      "ns3/random-variable-stream.h",
      "ns3/double.h",
      "ns3/normal-random-variable.h",
      "ns3/node-container.h",
      "oran-6g-neuromorphic-computing.h",
      "ns3/uinteger.h",
      "ns3/ptr.h",
      "ns3/pointer.h",
      "ns3/boolean.h",
      "ns3/simulation-time.h"
    ],
    "oran-6g-holographic": [
      "ns3/log.h",
      "ns3/string.h",
      "ns3/object.h",
      "ns3/vector.h",
      "ns3/uniform-random-variable.h",
      "ns3/random-variable-stream.h",
      "ns3/double.h",
      "ns3/normal-random-variable.h",
      "ns3/traced-callback.h",
      "ns3/boolean.h",
      "ns3/uinteger.h",
      "ns3/ptr.h",
      "ns3/pointer.h",
      "oran-6g-holographic.h"
    ],
    "oran-6g-brain-computer-interface": [
      "oran-6g-brain-computer-interface.h",
      "ns3/log.h",
      "ns3/string.h",
      "ns3/object.h",
      "ns3/double.h",
      "ns3/node-container.h",
      "ns3/simulator.h",
      "ns3/uinteger.h",
      "ns3/ptr.h",
      "ns3/boolean.h",
      "ns3/simulation-time.h"
    ],
    "oran-6g-cybersecurity": [
      "ns3/log.h",
      "oran-6g-cybersecurity.h",
      "ns3/string.h",
      "ns3/object.h",
      "ns3/vector.h",
      "ns3/callback.h",
      "ns3/random-variable-stream.h",
      "ns3/double.h",
      "ns3/simulator.h",
      "ns3/uinteger.h",
      "ns3/ptr.h",
      "ns3/boolean.h"
    ],
    "oran-6g-semantic-communications": [
      "oran-6g-semantic-communications.h",
      "ns3/log.h",
      "ns3/string.h",
      "ns3/object.h",
      "ns3/double.h",
      "ns3/node-container.h",
      "ns3/simulator.h",
      "ns3/uinteger.h",
      "ns3/ptr.h",
      "ns3/boolean.h",
      "ns3/simulation-time.h"
    ],
    "oran-6g-ultra-ai-orchestrator": [
      "ns3/log.h",
      "ns3/string.h",
      "ns3/callback.h",
      "ns3/object.h",
      "ns3/vector.h",
      "oran-6g-ultra-ai-orchestrator.h",
      "ns3/double.h",
      "ns3/integer.h",
      "ns3/traced-callback.h",
      "ns3/uinteger.h",
      "ns3/simulator.h",
      "ns3/ptr.h",
      "ns3/boolean.h"
    ],
    "oran-6g-sags-network": [
      "ns3/mobility-model.h",
      "ns3/log.h",
      "ns3/string.h",
      "ns3/object.h",
      "ns3/vector.h",
      "oran-6g-sags-network.h",
      "ns3/integer.h",
      "ns3/double.h",
      "ns3/node-container.h",
      "ns3/mobility-helper.h",
      "ns3/uinteger.h",
      "ns3/simulator.h",
      "ns3/ptr.h",
      "ns3/boolean.h",
      "ns3/simulation-time.h"
    ],
    "oran-6g-terahertz": [
      "oran-data-repository.h",
      "ns3/mobility-model.h",
      "ns3/enum.h",
      "ns3/object.h",
      "ns3/spectrum-model.h",
      "ns3/double.h",
      "ns3/antenna-model.h",
      "ns3/node.h",
      "ns3/simulator.h",
      "ns3/uinteger.h",
      "ns3/log.h",
      "oran-6g-terahertz.h"
    ],
    "oran-ai-transformer": [
      "oran-data-repository.h",
      "oran-ai-transformer.h",
      "ns3/nstime.h",
      "ns3/callback.h",
      "ns3/object.h",
      "ns3/double.h",
      "ns3/traced-value.h",
      "ns3/simulator.h",
      "ns3/log.h",
      "ns3/uinteger.h",
      "ns3/boolean.h"
    ],
    "oran-6g-quantum-enhanced": [
      "ns3/mobility-model.h",
      "ns3/net-device.h",
      "ns3/log.h",
      "ns3/string.h",
      "ns3/object.h",
      "ns3/vector.h",
      "oran-6g-quantum-enhanced.h",
      "ns3/random-variable-stream.h",
      "ns3/double.h",
      "ns3/traced-callback.h",
      "ns3/uinteger.h",
      "ns3/simulator.h",
      "ns3/ptr.h",
      "ns3/boolean.h"
    ],
    "oran-6g-edge-ai": [
      "ns3/log.h",
      "ns3/string.h",
      "oran-6g-edge-ai.h",
      "ns3/object.h",
      "ns3/vector.h",
      "ns3/callback.h",
      "ns3/random-variable-stream.h",
      "ns3/double.h",
      "ns3/integer.h",
      "ns3/simulator.h",
      "ns3/ptr.h",
      "ns3/boolean.h"
    ]
  },
  "quality_distribution": {
    "excellent": 0,
    "good": 2,
    "fair": 9,
    "needs_improvement": 0,
    "poor": 0
  },
  "analysis_timestamp": "2025-07-08T12:41:33.804788",
  "performance_indicators": {
    "analysis_duration_seconds": 0.4376332759857178,
    "modules_per_second": 25.135200186100533,
    "lines_analyzed_per_second": 31937.699363738833,
    "average_module_size": 1270.6363636363637
  },
  "module_metrics": [
    {
      "name": "oran-6g-neuromorphic-computing",
      "header_file": "D:\\ns3-oran-master\\model\\oran-6g-neuromorphic-computing.h",
      "source_file": "D:\\ns3-oran-master\\model\\oran-6g-neuromorphic-computing.cc",
      "lines_of_code": 1911,
      "header_lines": 608,
      "source_lines": 1303,
      "complexity_score": 8.320251177394034,
      "class_count": 6,
      "method_count": 180,
      "include_count": 24,
      "namespace_count": 4,
      "comment_ratio": 21.036106750392463,
      "documentation_score": 100,
      "api_functions": [
        "InitializeNeuromorphicArchitecture()",
        "EnableFederatedNeuromorphicLearning(const NodeContainer &participating_nodes,\n                                                 const std::string &aggregation_method,\n                                                 const std::vector<std::string> &privacy_preservation)",
        "InjectSpikeTrains(uint32_t population_id,\n                               const SpikeTrainData &spike_data,\n                               const std::string &injection_mode)",
        "IntegrateWithTraditionalAI(const std::map<std::string, Ptr<Object>> &ai_models,\n                                        const std::string &integration_strategy,\n                                        const std::string &data_flow_management)",
        "MonitorNeuromorphicPerformance(const std::vector<std::string> &monitoring_metrics,\n                                                                      Time monitoring_frequency)",
        "ConfigureNetworkReconfiguration(const std::vector<std::string> &reconfiguration_triggers,\n                                             const std::map<std::string, std::string> &reconfiguration_strategies,\n                                             double adaptation_speed)",
        "EnableEventDrivenCommunication(const std::string &communication_protocol,\n                                            const std::string &spike_encoding,\n                                            double transmission_reliability)",
        "UpdatePerformanceMetrics()",
        "ConfigureHomeostaticPlasticity(double target_firing_rate,\n                                            double homeostatic_timescale,\n                                            double scaling_factor)",
        "CreateSpikingNeuronPopulation(uint32_t population_size,\n                                               const NeuromorphicNeuron &neuron_params,\n                                               const std::string &population_name)",
        "ConfigureHybridProcessingPipeline(const std::vector<NeuromorphicTask> &neuromorphic_tasks,\n                                               const std::vector<std::map<std::string, std::string>> &traditional_ai_tasks,\n                                               const std::string &pipeline_orchestration)",
        "AdaptLearningParameters()",
        "ApplyLearningRules()",
        "ProcessSynapticTransmission()",
        "DeploySpikingNeuralNetwork(const NeuromorphicNetworkConfig &network_config,\n                                          const std::string &deployment_strategy)",
        "RecordNeuralActivity(const std::vector<uint32_t> &population_ids,\n                                            Time recording_duration,\n                                            const std::vector<std::string> &recording_variables)",
        "ConfigureNeuromorphicEdgeComputing(const std::vector<NeuromorphicTask> &edge_tasks,\n                                                const std::string &resource_allocation,\n                                                const std::string &load_balancing)",
        "UpdateNeuronStates(Time timestep)",
        "ConfigureNeuromorphicProcessors(const std::string &processor_type,\n                                             const std::map<std::string, double> &processor_config,\n                                             uint32_t parallelization_factor)",
        "ConfigureTemporalCoding(const std::string &coding_scheme,\n                                     double time_resolution,\n                                     double coding_precision)",
        "TrainNeuromorphicNetwork(const NeuromorphicTask &training_task,\n                                        const std::string &training_algorithm,\n                                        uint32_t training_epochs)",
        "EnableRealTimeNeuromorphicProcessing(const std::map<std::string, double> &real_time_constraints,\n                                                  const std::string &scheduling_algorithm,\n                                                  const std::string &priority_management)",
        "EnableOnlineLearning(const std::string &learning_algorithm,\n                                  const std::map<std::string, double> &learning_parameters,\n                                  double adaptation_threshold)",
        "GetTypeId(void)",
        "OptimizeNetworkTopology()",
        "SetupNeuronPopulations()",
        "DeployDistributedNeuromorphicNetwork(const NodeContainer &edge_nodes,\n                                                  const std::string &distribution_strategy,\n                                                  const std::string &synchronization_protocol)",
        "ConfigureEnergyEfficientProcessing(double power_budget,\n                                                const std::string &energy_optimization_strategy,\n                                                bool dynamic_voltage_scaling)",
        "EnableNeuromorphicAcceleration(const std::vector<std::string> &acceleration_targets,\n                                            const std::string &acceleration_strategy,\n                                            const std::map<std::string, bool> &performance_monitoring)",
        "EstablishSynapticConnections()",
        "EnableSynapticPlasticity(NeuromorphicLearningRule learning_rule,\n                                      const std::map<std::string, double> &plasticity_params,\n                                      double adaptation_rate)",
        "MonitorSystemHealth()",
        "InitializeNeuromorphicSystem(NeuromorphicArchitecture architecture,\n                                          const NeuromorphicNetworkConfig &network_config,\n                                          const NodeContainer &processing_nodes)",
        "CalculateEnergyConsumption()",
        "ConnectNeuronPopulations(uint32_t source_population,\n                                      uint32_t target_population,\n                                      const NeuromorphicSynapse &synapse_params,\n                                      const std::string &connection_pattern)"
      ],
      "dependencies": [
        "ns3/exponential-random-variable.h",
        "ns3/log.h",
        "ns3/string.h",
        "ns3/object.h",
        "ns3/uniform-random-variable.h",
        "ns3/random-variable-stream.h",
        "ns3/double.h",
        "ns3/normal-random-variable.h",
        "ns3/node-container.h",
        "oran-6g-neuromorphic-computing.h",
        "ns3/uinteger.h",
        "ns3/ptr.h",
        "ns3/pointer.h",
        "ns3/boolean.h",
        "ns3/simulation-time.h"
      ],
      "size_bytes": 75191,
      "last_modified": "2025-07-07T21:42:55.705581",
      "quality_score": 61.71114599686028
    },
    {
      "name": "oran-6g-holographic",
      "header_file": "D:\\ns3-oran-master\\model\\oran-6g-holographic.h",
      "source_file": "D:\\ns3-oran-master\\model\\oran-6g-holographic.cc",
      "lines_of_code": 1386,
      "header_lines": 367,
      "source_lines": 1019,
      "complexity_score": 7.936507936507936,
      "class_count": 2,
      "method_count": 141,
      "include_count": 23,
      "namespace_count": 4,
      "comment_ratio": 20.346320346320347,
      "documentation_score": 100,
      "api_functions": [
        "EncodeHolographicData(const HologramFrame &hologram, double targetBitrate)",
        "InterpolateTemporalLightField(const LightField &previous, const LightField &current, double alpha)",
        "CalculateHolographicComplexity(const HologramFrame &hologram)",
        "PredictiveFrameGeneration(const std::vector<HologramFrame> &previousFrames,\n                                                const std::vector<Vector3D> &motionVectors)",
        "InitializeHolographicSystem(double resolution, double wavelength, uint32_t compressionLevel)",
        "CalculateCompressionEfficiency(uint32_t originalSize, uint32_t compressedSize)",
        "CreatePointCloudHologram(const std::vector<HolographicPoint> &points,\n                                               const std::pair<Vector3D, Vector3D> &boundingBox)",
        "WaveletHolographicCompression(const HologramFrame &hologram, const std::string &waveletType)",
        "InterpolateLightField(const LightField &lightField, const Vector3D &newAngle)",
        "CompressLightField(const LightField &lightField, uint32_t compressionRatio)",
        "SetHolographicParameters(const std::map<std::string, double> &parameters)",
        "GenerateLightField(const std::vector<HolographicPoint> &scenePoints,\n                                      const std::vector<Vector3D> &viewingAngles)",
        "DecodeHolographicData(const std::vector<uint8_t> &encodedData, uint32_t frameSize)",
        "GetTypeId(void)",
        "CalculateOptimalViewingAngle(const HologramFrame &hologram, const Vector3D &viewerPos)",
        "ApplyTemporalFiltering(std::vector<HologramFrame> &frames)",
        "UpdateHolographicMetrics()",
        "SetViewerTracking(bool enable, double trackingAccuracy = 0.01)",
        "InitializeHolographicBuffers()",
        "EnableAdaptiveTransmission(bool enable, double adaptationRate = 10.0)"
      ],
      "dependencies": [
        "ns3/log.h",
        "ns3/string.h",
        "ns3/object.h",
        "ns3/vector.h",
        "ns3/uniform-random-variable.h",
        "ns3/random-variable-stream.h",
        "ns3/double.h",
        "ns3/normal-random-variable.h",
        "ns3/traced-callback.h",
        "ns3/boolean.h",
        "ns3/uinteger.h",
        "ns3/ptr.h",
        "ns3/pointer.h",
        "oran-6g-holographic.h"
      ],
      "size_bytes": 54573,
      "last_modified": "2025-07-07T21:42:55.925311",
      "quality_score": 63.968311688311694
    },
    {
      "name": "oran-6g-brain-computer-interface",
      "header_file": "D:\\ns3-oran-master\\model\\oran-6g-brain-computer-interface.h",
      "source_file": "D:\\ns3-oran-master\\model\\oran-6g-brain-computer-interface.cc",
      "lines_of_code": 1497,
      "header_lines": 577,
      "source_lines": 920,
      "complexity_score": 6.813627254509018,
      "class_count": 5,
      "method_count": 131,
      "include_count": 19,
      "namespace_count": 4,
      "comment_ratio": 22.578490313961254,
      "documentation_score": 100,
      "api_functions": [
        "EnableThoughtToTextCommunication(const std::string &language_model,\n                                              uint32_t vocabulary_size,\n                                              double typing_speed_target)",
        "DecodeBrainState(const std::vector<double> &neural_features,\n                                    const std::string &decoding_model)",
        "EstablishBrainToBrainConnection(Ptr<Node> source_node,\n                                             Ptr<Node> target_node,\n                                             const BrainToBrainProtocol &communication_protocol)",
        "ConfigureNeurofeedbackTraining(const NeurofeedbackTraining &training_params,\n                                            const std::map<std::string, std::string> &user_profile)",
        "ConfigureEdgeNeuralComputing(const NodeContainer &edge_nodes,\n                                          const std::string &processing_distribution,\n                                          const std::string &load_balancing)",
        "ConfigureNeuralProsthetic(const std::string &prosthetic_type,\n                                       const std::map<std::string, std::string> &control_interface,\n                                       const HapticFeedbackConfig &sensory_feedback)",
        "ClassifyBrainState(const std::vector<double> &features)",
        "InitializeNeuralProcessingPipeline()",
        "ValidateNeuralSignalQuality(const std::vector<std::vector<double>> &signals)",
        "ConfigureMultiModalSensorFusion(const std::vector<std::string> &sensor_types,\n                                             const std::string &fusion_algorithm,\n                                             const std::string &confidence_weighting)",
        "OptimizeNeuralProcessingPipeline(const std::string &optimization_objective,\n                                                const std::map<std::string, double> &resource_constraints)",
        "EnableAdaptiveBciLearning(const std::string &adaptation_algorithm,\n                                       double adaptation_rate,\n                                       double personalization_level)",
        "EnableBiometricNeuralAuthentication(const std::string &authentication_method,\n                                                 const std::string &security_level,\n                                                 double false_acceptance_rate)",
        "ApplyPrivacyProtection(std::vector<double> &neural_data)",
        "CalculateProcessingLatency(Time start_time, Time end_time)",
        "ConfigureMotorControlInterface(const std::string &control_type,\n                                            uint32_t degrees_of_freedom,\n                                            double control_precision)",
        "EnableNeuralDataEncryption(const std::string &encryption_algorithm,\n                                        const std::string &key_management_system,\n                                        bool homomorphic_computation)",
        "EnableCrossPlatformCompatibility(const std::vector<std::string> &platform_standards,\n                                              const std::vector<std::string> &data_formats,\n                                              const std::vector<std::string> &api_protocols)",
        "ConfigureDifferentialPrivacy(double privacy_budget,\n                                          const std::string &noise_mechanism,\n                                          const std::string &utility_preservation)",
        "TransmitNeuralInformation(const BrainState &brain_state,\n                                         Ptr<Node> destination_node,\n                                         const std::string &encoding_method)",
        "EnableSensorySubstitution(const std::string &source_modality,\n                                       const std::string &target_modality,\n                                       const std::string &conversion_algorithm)",
        "UpdatePerformanceMetrics(const std::map<std::string, double> &metrics)",
        "TrainNeuralDecodingModels(const std::vector<std::pair<std::vector<double>, BrainState>> &training_data,\n                                         const NeuralNetworkArchitecture &network_architecture,\n                                         const std::string &training_strategy)",
        "EnableRealTimeNeuralProcessing(double processing_latency_target,\n                                            double bandwidth_requirement,\n                                            double reliability_requirement)",
        "ConfigureMemoryAugmentation(const std::string &memory_type,\n                                         const std::string &augmentation_strategy,\n                                         uint64_t storage_capacity)",
        "GetTypeId(void)",
        "UpdateBrainStateHistory(uint32_t node_id, const BrainState &state)",
        "ConfigureImmersiveNeuralFeedback(const std::vector<std::string> &feedback_modalities,\n                                              double feedback_fidelity,\n                                              double latency_requirement)",
        "CreateBrainNetwork(const NodeContainer &participant_nodes,\n                                const std::string &network_topology,\n                                const std::string &synchronization_protocol)",
        "IntegrateWithAiSystems(const std::map<std::string, Ptr<Object>> &ai_systems,\n                                    const std::vector<std::string> &integration_protocols)",
        "InitializeBciSystem(NeuralInterfaceType interface_type,\n                                 const NeuralSignalProcessing &signal_processing,\n                                 BciApplicationType application_type)",
        "ConfigureCognitiveEnhancement(const std::string &enhancement_type,\n                                           const std::vector<std::string> &enhancement_protocols,\n                                           const std::string &adaptation_algorithm)",
        "EnableNeuralAvatarControl(const std::map<std::string, std::string> &avatar_configuration,\n                                       const std::map<std::string, std::string> &control_mapping,\n                                       double synchronization_quality)",
        "InitializeMetaverseNeuralInterface(const std::map<std::string, std::string> &virtual_environment,\n                                                double immersion_level,\n                                                const std::vector<std::string> &interaction_modalities)"
      ],
      "dependencies": [
        "oran-6g-brain-computer-interface.h",
        "ns3/log.h",
        "ns3/string.h",
        "ns3/object.h",
        "ns3/double.h",
        "ns3/node-container.h",
        "ns3/simulator.h",
        "ns3/uinteger.h",
        "ns3/ptr.h",
        "ns3/boolean.h",
        "ns3/simulation-time.h"
      ],
      "size_bytes": 58154,
      "last_modified": "2025-07-07T21:20:44.557806",
      "quality_score": 62.531609886439554
    },
    {
      "name": "oran-6g-cybersecurity",
      "header_file": "D:\\ns3-oran-master\\model\\oran-6g-cybersecurity.h",
      "source_file": "D:\\ns3-oran-master\\model\\oran-6g-cybersecurity.cc",
      "lines_of_code": 1792,
      "header_lines": 602,
      "source_lines": 1190,
      "complexity_score": 6.361607142857142,
      "class_count": 5,
      "method_count": 152,
      "include_count": 25,
      "namespace_count": 4,
      "comment_ratio": 10.714285714285714,
      "documentation_score": 100,
      "api_functions": [
        "QuantumSafeVPN(const std::vector<uint32_t> &tunnelNodes)",
        "InitializeBlockchain()",
        "MonitorSessionActivity(const std::string &sessionId)",
        "ValidateBlock(const std::string &blockData)",
        "HuntAdvancedPersistentThreats()",
        "UpdateBehaviorBaseline(const std::string &userId)",
        "EnableSecureMultipartyComputation(const std::vector<uint32_t> &parties)",
        "QuantumSafeBlockchain(const std::string &blockchainId)",
        "UpdateIdentityCredentials(const std::string &identityId,\n                                       const std::map<std::string, std::string> &credentials)",
        "DeployHoneypots(uint32_t numberOfHoneypots)",
        "RefreshSessionTokens(const std::string &sessionId)",
        "ReceiveThreatIntelligence(const std::string &externalThreatData)",
        "InitializeRandomVariables()",
        "AdaptSecurityPolicies(const std::vector<SecurityIncident> &recentIncidents)",
        "HybridEncryption(const std::vector<uint8_t> &data,\n                              CryptoAlgorithm classicalAlg, CryptoAlgorithm postQuantumAlg)",
        "GetSecurityCompliance()",
        "DetectSecurityIncident(ThreatType threatType, uint32_t sourceNode,\n                                    AlertLevel alertLevel)",
        "AnalyzeIndicatorsOfCompromise(const std::vector<std::string> &iocs)",
        "UpdateThreatIntelligence()",
        "ManageUserSession(const std::string &userId, const std::string &sessionId)",
        "ScheduleSecurityTasks()",
        "GenerateSecurityInsights()",
        "PredictiveVulnerabilityScanning()",
        "BehavioralAnalysis(const std::string &userId, const std::vector<std::string> &activities)",
        "CalculateRiskAssessment()",
        "ContinuousMonitoring(const std::string &userId, const std::string &sessionId)",
        "AnalyzeBehaviorDeviation(const std::string &userId,\n                                        const std::vector<std::string> &currentActivities)",
        "ValidateDeviceCompliance(uint32_t deviceId, const std::vector<std::string> &policies)",
        "CategorizeIncident(SecurityIncident &incident)",
        "PreventNetworkIntrusion(uint32_t nodeId, const std::string &intrusionType)",
        "UpdateDevicePosture(uint32_t deviceId, const std::string &postureData)",
        "RecoverFromAttack(uint32_t incidentId)",
        "GetIncidentResponseTime()",
        "VerifyDecentralizedIdentity(const std::string &identityToken)",
        "ApplySegmentPolicies(const std::string &segmentId,\n                                  const std::vector<std::string> &policies)",
        "InitializePostQuantumCrypto()",
        "ArchiveIncident(uint32_t incidentId)",
        "CreateUserProfile(const std::string &userId, const std::vector<std::string> &activities)",
        "TransferSecurityToken(const std::string &fromId, const std::string &toId,\n                                   const std::string &token)",
        "SetThreatDetectedCallback(ThreatDetectedCallback callback)",
        "AddBlockToChain(const std::string &blockData)",
        "DeployQuantumResistantCrypto()",
        "ActivateAiThreatDetection()",
        "ImplementHomomorphicComputation(const std::vector<uint8_t> &data)",
        "BurnSecurityToken(const std::string &token, const std::string &reason)",
        "LogSecurityEvent(const SecurityIncident &incident)",
        "OptimizeSecurityConfiguration()",
        "DetectAnomalies(const std::vector<double> &networkFeatures)",
        "GetActiveThreats()",
        "QuarantineDevice(uint32_t deviceId, const std::string &reason)",
        "UpdateThreatModel(const std::vector<SecurityIncident> &incidents)",
        "MonitorSecurityThreats()",
        "InitializeBlockchainSecurity()",
        "IsolateCompromisedSegment(const std::string &segmentId)",
        "ConductSecurityStressTest()",
        "RevokeIdentity(const std::string &identityId, const std::string &reason)",
        "PredictAttackProbability(const std::string &attackType,\n                                        const std::vector<double> &riskFactors)",
        "AlgorithmTransition(uint32_t transitionPeriodDays)",
        "GenerateRiskAssessment(uint32_t nodeId)",
        "QuantumSafeTLS(uint32_t connectionId)",
        "TerminateSession(const std::string &sessionId, const std::string &reason)",
        "DetectQuantumAttacks()",
        "CollaborativeThreatHunting(const std::vector<std::string> &partnerNetworks)",
        "InitializeQKD(uint32_t nodeA, uint32_t nodeB)",
        "AuthorizeAccess(const std::string &userId, const std::string &resource,\n                             const std::string &action)",
        "GenerateIncidentReport(uint32_t incidentId)",
        "IdentifyBotnetActivity(const std::vector<uint32_t> &nodeIds)",
        "AuthorizeResource(const std::string &userId, const std::string &resource,\n                               const std::string &action)",
        "CreateMicroSegment(const std::string &segmentId, const std::vector<uint32_t> &nodes)",
        "GenerateSecurityReport(const std::string &reportType)",
        "TrainAnomalyDetection(const std::vector<std::vector<double>> &normalTraffic)",
        "EnforceSecurityCompliance(const std::vector<std::string> &regulations)",
        "AuthenticateUser(const std::string &userId, const std::string &credentials,\n                              uint32_t deviceId)",
        "VerifyIdentity(const std::string &userId, const std::string &credentials)",
        "SetIncidentResolvedCallback(IncidentResolvedCallback callback)",
        "MaintainSecurityDocumentation()",
        "RequireStepUpAuth(const std::string &userId, const std::string &method)",
        "EscalateIncident(uint32_t incidentId)",
        "SetAuthenticationAttemptCallback(AuthenticationAttemptCallback callback)",
        "InitializeSecurityFramework()",
        "CryptoAgility(const std::string &oldAlgorithm, const std::string &newAlgorithm)",
        "AutomateIncidentResponse(uint32_t incidentId)",
        "ApplyLeastPrivilege(const std::string &userId, std::vector<std::string> &permissions)",
        "DistributeQuantumKeys(const std::vector<uint32_t> &nodes)",
        "BiometricVerification(const std::string &userId, const std::vector<uint8_t> &biometricData)",
        "GetSecurityScore()",
        "DetectMaliciousTraffic(const std::vector<uint8_t> &traffic)",
        "ValidateSecurityToken(const std::string &token)",
        "HashBasedVerify(const std::vector<uint8_t> &message,\n                             const std::vector<uint8_t> &signature,\n                             const std::string &publicKey)",
        "ProcessSecurityAlerts()",
        "DetectEavesdropping(const std::vector<uint8_t> &quantumChannel)",
        "ShareThreatIntelligence(const std::string &threatData)",
        "UpdateGlobalThreatModel()",
        "AiThreatDetection()",
        "ProofOfAuthorityConsensus(const std::vector<std::string> &authorities)",
        "IntegrateSecurityTools()",
        "ThreatIntelligenceIntegration(const std::map<std::string, std::string> &threatFeed)",
        "GetTypeId(void)",
        "RespondToThreat(uint32_t incidentId, const std::vector<std::string> &actions)",
        "ZeroTrustEngine()",
        "SetSecurityAlertCallback(SecurityAlertCallback callback)",
        "ByzantineFaultTolerance(uint32_t maxFaultyNodes)",
        "AuditSecurityConfiguration()",
        "GenerateIncidentId()",
        "CorrelateSecurityEvents(const std::vector<SecurityIncident> &events)",
        "PredictSecurityThreats(uint32_t timeHorizonHours)",
        "CalculateDeviceTrust(uint32_t deviceId, const std::map<std::string, double> &attributes)",
        "AnalyzeDNSTraffic(const std::vector<std::string> &dnsQueries)",
        "ImplementDataLossPrevention(const std::vector<uint8_t> &data)",
        "PerformSecurityAnalysis()",
        "DeploySecurityContract(const std::string &contractCode)",
        "TrainThreatDetectionModels(const std::vector<SecurityIncident> &trainingData)",
        "MonitorNetworkTraffic(const std::vector<uint8_t> &trafficData)",
        "EnforceDataPrivacy(const std::string &userId, const std::vector<uint8_t> &personalData)",
        "EnableZeroTrustArchitecture()",
        "EstablishQuantumSecureChannel(uint32_t nodeA, uint32_t nodeB)",
        "SecureNetworkCommunication(uint32_t nodeA, uint32_t nodeB,\n                                        const std::vector<uint8_t> &data)",
        "AnalyzeTrafficPatterns(const std::vector<uint8_t> &packetData)",
        "ExecuteSecurityContract(const std::string &contractId,\n                                     const std::vector<std::string> &parameters)",
        "TransitionToPostQuantumCrypto()",
        "PredictSecurityRequirements()",
        "OrchestrateSecurity(const std::string &scenario)",
        "InitializeDetectionModels()",
        "LogAccessAttempt(const std::string &userId, const std::string &resource, bool success)",
        "DynamicSegmentation(const std::vector<uint32_t> &nodes,\n                                 const std::string &criteria)",
        "CalculateRiskScore(const std::string &userId, const std::string &context)",
        "ValidateContractExecution(const std::string &contractId, const std::string &result)",
        "AnalyzeSecurityTrends()",
        "UpdateSecurityContract(const std::string &contractId, const std::string &newCode)",
        "ProofOfStakeConsensus(const std::vector<std::string> &validators)",
        "ImplementNetworkSegmentation(const std::vector<uint32_t> &nodes)",
        "QuantumResistantCrypto()",
        "EnforceAccessPolicies(const std::vector<std::string> &policies)",
        "InitializeZeroTrust()",
        "UpdateSecurityMetrics()",
        "ContainSecurityBreach(uint32_t incidentId)",
        "CoordinateSecurityResponse()",
        "BlockchainSecurity()",
        "LogConfigurationChange(const std::string &component, const std::string &change)",
        "AutomateSecurityWorkflows()",
        "DistributedConsensus(const std::vector<uint32_t> &participatingNodes)"
      ],
      "dependencies": [
        "ns3/log.h",
        "oran-6g-cybersecurity.h",
        "ns3/string.h",
        "ns3/object.h",
        "ns3/vector.h",
        "ns3/callback.h",
        "ns3/random-variable-stream.h",
        "ns3/double.h",
        "ns3/simulator.h",
        "ns3/uinteger.h",
        "ns3/ptr.h",
        "ns3/boolean.h"
      ],
      "size_bytes": 67672,
      "last_modified": "2025-07-07T21:33:16.673162",
      "quality_score": 60.23437500000001
    },
    {
      "name": "oran-6g-semantic-communications",
      "header_file": "D:\\ns3-oran-master\\model\\oran-6g-semantic-communications.h",
      "source_file": "D:\\ns3-oran-master\\model\\oran-6g-semantic-communications.cc",
      "lines_of_code": 1526,
      "header_lines": 467,
      "source_lines": 1059,
      "complexity_score": 6.8152031454783755,
      "class_count": 5,
      "method_count": 131,
      "include_count": 19,
      "namespace_count": 4,
      "comment_ratio": 21.55963302752294,
      "documentation_score": 100,
      "api_functions": [
        "ProcessMultimodalContent(const std::string &text_content,\n                                                     const std::vector<uint8_t> &visual_content,\n                                                     const std::vector<double> &audio_content)",
        "InitializeSemanticModels()",
        "UpdateCommunicationStatistics(const SemanticQualityMetrics &metrics)",
        "IntegrateWithDigitalTwin(Ptr<Object> digital_twin_system,\n                                      bool semantic_twin_sync)",
        "InitializeSemanticSystem(const SemanticKnowledgeBase &knowledge_base,\n                                      const std::string &model_path)",
        "EnableCollaborativeSemanticLearning(const NodeContainer &participant_nodes,\n                                                 const std::string &learning_algorithm,\n                                                 const std::vector<std::string> &privacy_preservation)",
        "EnableSemanticNetworkCoding(const std::string &coding_strategy,\n                                         double coding_efficiency)",
        "EvaluateSemanticQuality(const std::string &original_content,\n                                                       const std::string &reconstructed_content,\n                                                       const std::vector<std::string> &evaluation_metrics)",
        "OptimizeSemanticSystemParameters(const std::map<std::string, double> &performance_feedback,\n                                              const std::string &optimization_target)",
        "CalculateSemanticSimilarity(const std::vector<double> &semantics1, const std::vector<double> &semantics2)",
        "PreloadSemanticContent(const std::vector<std::vector<double>> &predicted_semantics,\n                                    const NodeContainer &cache_nodes,\n                                    const std::string &cache_strategy)",
        "GetTypeId(void)",
        "EnableZeroShotSemanticCommunication(const std::string &domain_adaptation_model,\n                                                 const std::vector<std::pair<std::string, std::string>> &few_shot_examples)",
        "IntegrateWithAiSystems(const std::map<std::string, std::string> &ai_models,\n                                    const std::string &integration_strategy)",
        "ConfigureSemanticErrorCorrection(const std::string &error_correction_strategy,\n                                              double redundancy_level)",
        "IsSemanticCacheHit(const std::vector<double> &semantics, double similarity_threshold)",
        "ConfigureSemanticSlicing(const std::map<std::string, std::vector<double>> &slice_requirements,\n                                      const std::string &slice_optimization_strategy)",
        "UpdateSemanticCache(const std::vector<double> &semantics, const std::string &content_id)",
        "AnalyzeCommunicationContext(const std::string &application_type,\n                                                         const std::map<std::string, std::string> &user_profile,\n                                                         const std::map<std::string, double> &environmental_data)",
        "TransmitSemanticContent(const std::vector<double> &semantic_encoding,\n                                       Ptr<Node> destination_node,\n                                       SemanticTransmissionMode transmission_mode)"
      ],
      "dependencies": [
        "oran-6g-semantic-communications.h",
        "ns3/log.h",
        "ns3/string.h",
        "ns3/object.h",
        "ns3/double.h",
        "ns3/node-container.h",
        "ns3/simulator.h",
        "ns3/uinteger.h",
        "ns3/ptr.h",
        "ns3/boolean.h",
        "ns3/simulation-time.h"
      ],
      "size_bytes": 59494,
      "last_modified": "2025-07-07T21:33:16.990636",
      "quality_score": 62.26736566186107
    },
    {
      "name": "oran-6g-ultra-ai-orchestrator",
      "header_file": "D:\\ns3-oran-master\\model\\oran-6g-ultra-ai-orchestrator.h",
      "source_file": "D:\\ns3-oran-master\\model\\oran-6g-ultra-ai-orchestrator.cc",
      "lines_of_code": 1214,
      "header_lines": 382,
      "source_lines": 832,
      "complexity_score": 6.919275123558484,
      "class_count": 4,
      "method_count": 93,
      "include_count": 23,
      "namespace_count": 4,
      "comment_ratio": 21.25205930807249,
      "documentation_score": 100,
      "api_functions": [
        "InitializeConsciousnessFramework()",
        "time (ms)",
        "InitializeMultimodalFusion()",
        "DeploySelfEvolvingArchitecture(NeuralArchitectureType architecture_type,\n                                            const std::map<std::string, double> &initial_config)",
        "InitializeUltraAiOrchestrator()",
        "ActivateNetworkConsciousness(ConsciousnessLevel consciousness_level,\n                                          double self_awareness_threshold)",
        "CreateCognitiveDigitalTwin(const std::string &twin_id,\n                                        const std::map<std::string, std::string> &real_world_mapping)",
        "ExecuteContinualLearning(const std::vector<std::vector<double>> &new_data_stream,\n                                      const std::vector<double> &importance_weights)",
        "UpdateAIModelPerformance(const std::string &model_id, double performance_delta)",
        "SimulateArchitectureEvolution(const std::string &architecture_id, double evolution_step)",
        "InitializeNeuralArchitectures()",
        "InitializeQuantumLearning()",
        "EnableExplainableAI(double explanation_granularity,\n                                 const std::vector<std::string> &target_stakeholders)",
        "SimulateConsciousnessEmergence(double complexity_level)",
        "ConfigureMultimodalFusion(const MultimodalFusionConfig &fusion_config)",
        "EnableFederatedQuantumLearning(uint32_t num_quantum_nodes,\n                                            double entanglement_strength)",
        "SimulateQuantumEntanglement(double entanglement_strength)"
      ],
      "dependencies": [
        "ns3/log.h",
        "ns3/string.h",
        "ns3/callback.h",
        "ns3/object.h",
        "ns3/vector.h",
        "oran-6g-ultra-ai-orchestrator.h",
        "ns3/double.h",
        "ns3/integer.h",
        "ns3/traced-callback.h",
        "ns3/uinteger.h",
        "ns3/simulator.h",
        "ns3/ptr.h",
        "ns3/boolean.h"
      ],
      "size_bytes": 51948,
      "last_modified": "2025-07-07T21:11:16.451118",
      "quality_score": 67.89462932454695
    },
    {
      "name": "oran-6g-sags-network",
      "header_file": "D:\\ns3-oran-master\\model\\oran-6g-sags-network.h",
      "source_file": "D:\\ns3-oran-master\\model\\oran-6g-sags-network.cc",
      "lines_of_code": 1050,
      "header_lines": 404,
      "source_lines": 646,
      "complexity_score": 9.523809523809524,
      "class_count": 4,
      "method_count": 89,
      "include_count": 23,
      "namespace_count": 4,
      "comment_ratio": 23.904761904761905,
      "documentation_score": 100,
      "api_functions": [
        "OptimizeHapsEnergyManagement(const std::string &solar_prediction_model,\n                                          const std::string &energy_optimization_strategy)",
        "OrchestrateSagsResources(const CoverageRequirement &requirement)",
        "DeployHapsNetwork(const std::vector<HapsNode> &haps_nodes)",
        "ConfigureSeamlessMobility(Time mobility_prediction_horizon,\n                                       Time handover_preparation_time)",
        "UpdateHapsPositions(Time current_time)",
        "CalculateInterDomainConnectivity()",
        "ConfigureInterSatelliteLinks(double max_isl_range,\n                                          double isl_data_rate,\n                                          bool laser_communication = true)",
        "ConfigureHolographicCommunication(double hologram_compression_ratio,\n                                               bool multi_domain_synchronization)",
        "UpdatePerformanceMetrics()",
        "DeployUnderwaterSensorNetwork(const std::vector<Vector> &sensor_positions,\n                                           const std::vector<std::string> &sensor_capabilities)",
        "TrainAiOptimizationModels(const std::vector<std::map<std::string, double>> &training_data,\n                                       const std::string &model_type)",
        "ConfigureFederatedLearning(const std::string &fl_aggregation_method,\n                                        const std::vector<std::string> &privacy_preserving_techniques)",
        "OptimizeGlobalResourceAllocation(const std::map<Vector, double> &traffic_prediction,\n                                              const std::string &optimization_objective)",
        "EnableAutonomousNetworkHealing(const std::string &healing_algorithm,\n                                            double failure_detection_threshold)",
        "CalculateCoverageForArea(const Vector &area_center, double area_radius)",
        "ConfigureUnderwaterComm(const AcousticParameters &params)",
        "UpdateOrbitalPositions(Time current_time)",
        "DeploySatelliteConstellation(ConstellationType type,\n                                          uint32_t num_satellites,\n                                          const std::vector<OrbitalParameters> &orbital_params)",
        "CheckHandoverFeasibility(DomainType source, DomainType target)",
        "OptimizeInterDomainHandover(DomainType source_domain,\n                                         DomainType target_domain,\n                                         const std::map<std::string, double> &handover_criteria)",
        "ConfigureSpaceBasedEdgeComputing(const std::vector<uint32_t> &satellite_edge_nodes,\n                                              const std::string &edge_caching_strategy)",
        "EnableQuantumCommunication(bool quantum_key_distribution,\n                                        bool quantum_error_correction)",
        "GetTypeId(void)",
        "OptimizeNetworkTopology()",
        "ConfigureHapsMobility(uint32_t node_id,\n                                   const std::string &mobility_pattern,\n                                   const std::map<std::string, double> &mobility_parameters)",
        "OptimizeSatelliteBeamforming(const std::vector<Vector> &coverage_areas,\n                                          const std::string &beam_optimization_algorithm)",
        "InitializeSagsNetwork()",
        "EnableAiNetworkSelection(const std::string &ai_model,\n                                      double context_awareness_level)",
        "EnablePredictiveAnalytics(Time prediction_horizon,\n                                       double prediction_accuracy_target)",
        "OptimizeUnderwaterRouting(const std::string &routing_algorithm,\n                                       const std::map<std::string, double> &adaptation_parameters)"
      ],
      "dependencies": [
        "ns3/mobility-model.h",
        "ns3/log.h",
        "ns3/string.h",
        "ns3/object.h",
        "ns3/vector.h",
        "oran-6g-sags-network.h",
        "ns3/integer.h",
        "ns3/double.h",
        "ns3/node-container.h",
        "ns3/mobility-helper.h",
        "ns3/uinteger.h",
        "ns3/simulator.h",
        "ns3/ptr.h",
        "ns3/boolean.h",
        "ns3/simulation-time.h"
      ],
      "size_bytes": 41840,
      "last_modified": "2025-07-07T20:50:09.451249",
      "quality_score": 70.92380952380951
    },
    {
      "name": "oran-6g-terahertz",
      "header_file": "D:\\ns3-oran-master\\model\\oran-6g-terahertz.h",
      "source_file": "D:\\ns3-oran-master\\model\\oran-6g-terahertz.cc",
      "lines_of_code": 676,
      "header_lines": 297,
      "source_lines": 379,
      "complexity_score": 4.585798816568047,
      "class_count": 6,
      "method_count": 56,
      "include_count": 16,
      "namespace_count": 4,
      "comment_ratio": 22.781065088757398,
      "documentation_score": 100,
      "api_functions": [
        "CalculateDataRate(Vector3D txPosition, Vector3D rxPosition)",
        "AdaptiveModulationCoding(double snr)",
        "DeployIntelligentReflectingSurfaces(std::vector<IrsConfiguration> irsConfigs)",
        "OptimizeNetworkThroughput()",
        "CalculateMolecularAbsorption(double frequency, double distance,\n                                            const AtmosphericConditions &conditions)",
        "OptimizeForMultipleUsers(std::vector<Vector3D> userPositions)",
        "CalculatePathLoss(double distance, double frequency,\n                                 const AtmosphericConditions &conditions)",
        "ConfigureIrs(const IrsConfiguration &config)",
        "EnableAiPhaseOptimization(bool enable)",
        "ConfigureUmMimo(const UmMimoConfiguration &config)",
        "GetTypeId()",
        "DeployUltraMassiveMimo(const UmMimoConfiguration &config)",
        "EnableOamMultiplexing(uint32_t oamModes)",
        "PerformBeamforming(std::vector<Vector3D> userPositions)",
        "EnableAiBeamManagement(bool enable)",
        "ConfigureTerahertzBand(ThzBand band, double bandwidthGHz)",
        "CalculateBeamformingGain(Vector3D userPosition, uint32_t beamIndex)",
        "OptimizeHybridBeamforming()",
        "CalculateSystemCapacity(std::vector<Vector3D> userPositions)",
        "CalculateLinkBudget(Vector3D txPosition, Vector3D rxPosition,\n                                   double txPower, double frequency)",
        "OptimizeBeamformingAndIrs()",
        "CalculateScatteringLoss(double frequency, double distance,\n                                       const AtmosphericConditions &conditions)",
        "UpdateChannelModel()",
        "LogPerformanceMetrics()",
        "OptimizePhaseShifts(Vector3D txPosition, Vector3D rxPosition)",
        "SetAtmosphericConditions(const AtmosphericConditions &conditions)"
      ],
      "dependencies": [
        "oran-data-repository.h",
        "ns3/mobility-model.h",
        "ns3/enum.h",
        "ns3/object.h",
        "ns3/spectrum-model.h",
        "ns3/double.h",
        "ns3/antenna-model.h",
        "ns3/node.h",
        "ns3/simulator.h",
        "ns3/uinteger.h",
        "ns3/log.h",
        "oran-6g-terahertz.h"
      ],
      "size_bytes": 23975,
      "last_modified": "2025-07-07T18:54:54.897791",
      "quality_score": 79.66047337278107
    },
    {
      "name": "oran-ai-transformer",
      "header_file": "D:\\ns3-oran-master\\model\\oran-ai-transformer.h",
      "source_file": "D:\\ns3-oran-master\\model\\oran-ai-transformer.cc",
      "lines_of_code": 952,
      "header_lines": 339,
      "source_lines": 613,
      "complexity_score": 7.9831932773109235,
      "class_count": 2,
      "method_count": 83,
      "include_count": 17,
      "namespace_count": 4,
      "comment_ratio": 23.10924369747899,
      "documentation_score": 100,
      "api_functions": [
        "IntegrateFederatedUpdate(const std::vector<std::vector<double>> &modelUpdates,\n                                      const std::vector<double> &nodeWeights)",
        "UpdateModel(const NetworkState &actualOutcome,\n                         const PredictionResult &previousPrediction)",
        "EnableZeroShotLearning(const std::string &scenarioDescription)",
        "SetPredictionCallback(PredictionCallback callback)",
        "PerformFederatedAggregation()",
        "InitializeTransformerArchitecture()",
        "UpdateModelParameters(const std::vector<std::vector<double>> &gradients,\n                                   double learningRate = 0.001)",
        "CalculateUncertainty(const std::vector<double> &input, uint32_t numSamples = 100)",
        "InitializeModel(ModelType modelType,\n                             uint32_t modelDimension = 512,\n                             uint32_t numHeads = 8,\n                             uint32_t numLayers = 6)",
        "AddNetworkObservation(const NetworkState &state)",
        "ScheduleFederatedLearning()",
        "SetDataRepository(Ptr<OranDataRepository> repository)",
        "ConfigureAttention(AttentionType attentionType, uint32_t contextWindow = 128)",
        "GetTypeId(void)"
      ],
      "dependencies": [
        "oran-data-repository.h",
        "oran-ai-transformer.h",
        "ns3/nstime.h",
        "ns3/callback.h",
        "ns3/object.h",
        "ns3/double.h",
        "ns3/traced-value.h",
        "ns3/simulator.h",
        "ns3/log.h",
        "ns3/uinteger.h",
        "ns3/boolean.h"
      ],
      "size_bytes": 34684,
      "last_modified": "2025-07-07T21:43:03.140448",
      "quality_score": 73.18689075630252
    },
    {
      "name": "oran-6g-quantum-enhanced",
      "header_file": "D:\\ns3-oran-master\\model\\oran-6g-quantum-enhanced.h",
      "source_file": "D:\\ns3-oran-master\\model\\oran-6g-quantum-enhanced.cc",
      "lines_of_code": 826,
      "header_lines": 301,
      "source_lines": 525,
      "complexity_score": 3.5108958837772395,
      "class_count": 2,
      "method_count": 63,
      "include_count": 19,
      "namespace_count": 4,
      "comment_ratio": 23.365617433414045,
      "documentation_score": 100,
      "api_functions": [
        "InitializeQuantumSensing(const std::string &sensorType, double sensitivity)",
        "InitializePostQuantumCrypto(const std::string &algorithm)",
        "SetQuantumParameters(const std::map<std::string, double> &parameters)",
        "InitializeQuantumStates()",
        "EstablishQuantumEntanglement(Ptr<Oran6gQuantumEnhanced> remoteNode,\n                                          const std::string &entanglementType)",
        "SimulateQuantumProcess(const std::string &processType)",
        "CalculateEntanglementFidelity(const QuantumState &state1, const QuantumState &state2)",
        "CreateQuantumSensorNetwork(const std::vector<Vector3D> &sensorPositions,\n                                        const std::string &entanglementTopology)",
        "InitializeQKD(const std::string &protocol, uint32_t keyLength)",
        "InitializeQuantumML(const std::string &algorithm, uint32_t qubits)",
        "QuantumErrorCorrection(const QuantumState &corruptedState,\n                                            const std::string &errorCorrectionCode)",
        "EnableQuantumErrorCorrection(bool enable, double threshold = 0.01)",
        "SetQuantumNoiseModel(const std::string &noiseModel, double noiseLevel)",
        "UpdateQuantumMetrics()",
        "GenerateRandomQuantumState()",
        "ApplyQuantumNoise(QuantumState &state)",
        "PerformKeyExchange(Ptr<Oran6gQuantumEnhanced> remoteNode)",
        "GetTypeId(void)"
      ],
      "dependencies": [
        "ns3/mobility-model.h",
        "ns3/net-device.h",
        "ns3/log.h",
        "ns3/string.h",
        "ns3/object.h",
        "ns3/vector.h",
        "oran-6g-quantum-enhanced.h",
        "ns3/random-variable-stream.h",
        "ns3/double.h",
        "ns3/traced-callback.h",
        "ns3/uinteger.h",
        "ns3/simulator.h",
        "ns3/ptr.h",
        "ns3/boolean.h"
      ],
      "size_bytes": 32298,
      "last_modified": "2025-07-07T20:32:42.337021",
      "quality_score": 77.09985472154965
    },
    {
      "name": "oran-6g-edge-ai",
      "header_file": "D:\\ns3-oran-master\\model\\oran-6g-edge-ai.h",
      "source_file": "D:\\ns3-oran-master\\model\\oran-6g-edge-ai.cc",
      "lines_of_code": 1147,
      "header_lines": 358,
      "source_lines": 789,
      "complexity_score": 6.364428945074106,
      "class_count": 5,
      "method_count": 124,
      "include_count": 22,
      "namespace_count": 4,
      "comment_ratio": 11.944202266782913,
      "documentation_score": 100,
      "api_functions": [
        "AnalyzeNetworkPatterns()",
        "ReconfigureTopology()",
        "InitializeQuantumCircuit(uint32_t qubits)",
        "OptimizeResourceAllocation()",
        "BalanceComputeLoad()",
        "UpdateNeuronStates(double timeStep)",
        "OptimizeModelPlacement()",
        "UnregisterEdgeNode(uint32_t unitId)",
        "AdaptSpikeThreshold(double targetEnergyLevel)",
        "ApplySecureAggregation(std::vector<std::vector<double>> &gradients)",
        "PredictTrafficAnomalies()",
        "InitializeRandomVariables()",
        "OptimizeHyperparameters()",
        "ApplyDifferentialPrivacy(std::vector<double> &gradients, double epsilon)",
        "QuantumSupportVectorMachine(const std::vector<std::vector<double>> &features,\n                                         const std::vector<int> &labels)",
        "AdaptLearningRate(double convergenceRate)",
        "OptimizeResourceUtilization()",
        "ActivateQuantumAcceleration(uint32_t nodeId, const std::string &algorithm)",
        "ApplySTDP(double pre_spike_time, double post_spike_time)",
        "CheckResourceAvailability(uint32_t nodeId, double requiredCompute, double requiredMemory)",
        "SetAnomalyDetectedCallback(AnomalyDetectedCallback callback)",
        "QuantumPhaseEstimation()",
        "GetAverageInferenceLatency()",
        "AdaptToUserBehavior(const std::vector<std::pair<std::string, double>> &userMetrics)",
        "UpdateNodeStatus(uint32_t unitId, double utilization, double powerLevel)",
        "OptimizeLatencyBudget(double targetLatency)",
        "AdaptModelArchitecture()",
        "InitializeSpikeNetwork(uint32_t neurons, uint32_t synapses)",
        "UpdateSynapticWeights(double learningRate)",
        "AllocateResources(uint32_t nodeId, const std::string &taskId, double compute, double memory)",
        "ManageEnergyBudget(double maxPowerConsumption)",
        "EnableContinualLearning()",
        "QuantumClassicalHybridAI()",
        "OptimizeEnergyEfficiency()",
        "ActivateTransferLearning(const std::string &sourceModel, const std::string &targetDomain)",
        "ProcessSpikePattern(const std::vector<double> &inputSpikes)",
        "DetectAnomalies()",
        "NeuromorphicEngine()",
        "UpdateSystemMetrics()",
        "EnableMetaLearning()",
        "DistributeInferenceWorkload(const std::vector<double> &input,\n                                         const std::string &modelName)",
        "SetAiInferenceCompleteCallback(AiInferenceCompleteCallback callback)",
        "ApplyHomeostaticPlasticity()",
        "RunPredictiveAnalytics()",
        "GetQuantumAdvantageRatio()",
        "PersonalizeModel(uint32_t nodeId, const std::vector<double> &personalData)",
        "SchedulePeriodicTasks()",
        "QuantumNeuralNetworkInference(const std::vector<double> &input)",
        "RegisterEdgeNode(const EdgeAiProcessingUnit &unit)",
        "CalculateComplexityScore(const std::vector<double> &input)",
        "UpdateGlobalModel(const std::vector<double> &aggregatedGradients)",
        "CalculatePowerConsumption()",
        "StartFederatedLearning(const std::string &modelType, uint32_t participants)",
        "ShorFactorization(uint64_t number)",
        "SynchronizeAiModels()",
        "DeallocateResources(uint32_t nodeId, const std::string &taskId)",
        "HandleNodeFailure(uint32_t nodeId)",
        "GetTypeId(void)",
        "SimulateRefractory(uint32_t neuronId, double refractoryPeriod)",
        "InitializePlatform()",
        "EnableNeuromorphicProcessing(uint32_t nodeId, const std::string &taskType)",
        "ApplyQuantumGate(const std::string &gate, const std::vector<uint32_t> &qubits)",
        "QuantumPrincipalComponentAnalysis(const std::vector<std::vector<double>> &data)",
        "MigrateAiWorkload(uint32_t fromNode, uint32_t toNode, const std::string &workload)",
        "ModulateNeurotransmitters(const std::string &type, double concentration)",
        "QuantumKMeansClustering(const std::vector<std::vector<double>> &data)",
        "ResetQuantumCircuit()",
        "FindLeastLoadedNode()",
        "GetFederatedLearningAccuracy()",
        "QuantumProcessing(const std::vector<double> &data)",
        "ClassicalPostprocessing(std::vector<double> &results)",
        "ClassicalPreprocessing(std::vector<double> &data)",
        "ImplementFewShotLearning()",
        "ProcessSensorData(const std::map<std::string, std::vector<double>> &sensorReadings)",
        "QuantumFourierTransform()",
        "GetEnergyEfficiency()",
        "UpdateIntrinsicExcitability()",
        "CoordinateEdgeIntelligence()",
        "ProcessVisionData(const std::vector<std::vector<uint8_t>> &imageData)",
        "SetFederatedRoundCompleteCallback(FederatedRoundCompleteCallback callback)",
        "FederatedLearningCoordinator()",
        "ProcessAudioData(const std::vector<double> &audioSignals)",
        "ApplyHomomorphicEncryption(std::vector<double> &data)",
        "GroverSearch(const std::vector<uint32_t> &database, uint32_t target)",
        "CalculateConvergenceMetric()",
        "SelectOptimalNode(const std::string &workloadType, double complexity)",
        "FuseMultiModalData()",
        "UpdateClientSelection(const std::vector<uint32_t> &availableClients)",
        "AggregateGradients(const std::vector<std::vector<double>> &gradients)",
        "InitializeFederatedRound(uint32_t roundId)"
      ],
      "dependencies": [
        "ns3/log.h",
        "ns3/string.h",
        "oran-6g-edge-ai.h",
        "ns3/object.h",
        "ns3/vector.h",
        "ns3/callback.h",
        "ns3/random-variable-stream.h",
        "ns3/double.h",
        "ns3/integer.h",
        "ns3/simulator.h",
        "ns3/ptr.h",
        "ns3/boolean.h"
      ],
      "size_bytes": 40810,
      "last_modified": "2025-07-07T20:32:43.619339",
      "quality_score": 67.53951176983435
    }
  ]
}